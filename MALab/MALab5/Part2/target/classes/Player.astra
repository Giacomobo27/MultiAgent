agent Player {
    module Console C;

types world {
    formula free(int);
    formula winner(string);
    formula played(string, int); 
    formula loser(string);
    formula drawn();
    formula opponent(string,string);  
    formula move(int);
    formula turn(string);

    formula player(string);
    formula location(int);
    formula line(int, int, int);
}



// Players
//initial player("X"), player("O");
//initial opponent("X","O"), opponent("O","X");
//all locations
initial location(1), location(2), location(3), location(4), location(5), location(6), location(7), location(8), location(9);
//winning lines
initial line(1, 2, 3), line(1, 5, 9), line(1, 4, 7), line(2, 5, 8), line(3, 6, 9), line(3, 5, 7), line(4, 5, 6), line(7, 8, 9);
//all free locations, dovrebbero essere dedotte dall inference
//O won configuration
//initial played("O",1), played("X",4), played("O",2), played("X",5), played("O",3);
//draw configuration
//initial played("O",1), played("X",4), played("O",2), played("X",5), played("O",6), played("X",3),  played("O",7), played("X",8), played("O",9);



inference free(int L) :-
    location(L) & ~played(string T, L);

inference winner(string T) :-
    line(int L1, int L2, int L3) & played( T, L1) & played(T, L2) & played(T, L3);

inference loser(string T) :-
    player(T) & winner(string T2) & T ~= T2;

inference drawn() :-
    ~free(int L) & ~winner(string T2); 
    // in generale se sono finiti tutti gli spazi e non è uscito ancora il belief che ce un vincitore vuol dire che è draw

//T è opponent di O che è player
inference opponent(string T, string O) :-
    player(O) & O ~= T;

    

rule +!main([string T, boolean turn]){
    if (~played(string K, int L)) 
  C.println("Game has not Started");

  if(free(int L))
  C.println("first free location: "+L);


    +player(T);
  //  +opponent(T2,T); //posso fare, se T=X allora t2=X
    if(turn){
        +turn(T);
        C.println("Match started with: " + T);
    }
    else{
        C.println("Match doesnt started with: " + T);

    }

}

// Making a move, its called only here, deliberation rule
rule +turn(string T) : player(T) & opponent(T, string T2){
C.println("in deliberation rule!");
!move(int L); // L o decide move definito giu e lo pone in played dopo
!played(T, L); 
!turn(T2);
}

rule +!played(string T, int L) : free(L) {
+played(T, L);
}

rule +!turn(string T2) : turn(string T) & winner(string W) {
-turn(T);
C.println("Winner: " + W);
}

rule +!turn(string T2) : turn(string T) & drawn() {
-turn(T);
C.println("Drawn!");
}

rule +!turn(string T2) : turn(string T) {
-+turn(T2);
}

rule +played(string P, int L) {
C.println("Player " + P + " played at location: " + L);
}



// Player move selection strategy…
rule +!move(int L) : free(1) { L=1; }
rule +!move(int L) : free(2) { L=2; }
rule +!move(int L) : free(3) { L=3; }
rule +!move(int L) : free(4) { L=4; }
rule +!move(int L) : free(5) { L=5; }
rule +!move(int L) : free(6) { L=6; }
rule +!move(int L) : free(7) { L=7; }
rule +!move(int L) : free(8) { L=8; }
rule +!move(int L) : free(9) { L=9; }

}