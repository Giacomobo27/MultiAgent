import mams.web.HttpResponse;
import mams.JSONConverter;
import mams.JSONBuilder;
import astra.jena.*;
import com.fasterxml.jackson.databind.JsonNode;

agent Main extends Shared {

    //Apache Jena Knowledge Stores
    module KnowledgeStore knowledgeStore; //To store knowledge about the players

    types players {
        formula player(string, string); //Agent role, agent URL: in my system
    }
    
    initial api_index_url("http://localhost:8083/");

    constant string XPlayerRole = "XPlayerRole";
    constant string OPlayerRole = "OPlayerRole";

    rule +!main(list l) : api_index_url(string game_url) {

        messaging.installService("mams", "mams.messaging.MAMSMessageService");

        MAMSAgent::!setup();
        MAMSAgent::!created("base");
        IntegratedInbox::!created("inbox");

        system.createAgent("AgentZero", "Player");
        system.setMainGoal("AgentZero", [game_url]);

        system.sleep(2000);
        
        !game();
    }

    rule +!game() : api_index_url(string game_url) {
        //TODO Part 2
    }

    rule $knowledgeStore.read(string url) : strings.endsWith(url, "players") {
        ///TODO Part 2
    }

    rule +form_actions(string form_url, string http_method, list required_actions) : strings.endsWith(form_url, "registerGame") {
        //TODO Part 2
    }        
    
    rule $knowledgeStore.read(string url) : strings.endsWith(url, "registerGame") {
        //TODO Part 2
    }

    /**
     * Means-end reasoning
     * GOAL: !clear_knowledge
     * This keeps things HATEOAS-y, i.e. each response from the API contains all the information the agent needs to 
     * play a game; so the links, forms and knowledge store should be cleared down in between API calls
     * to reflect this (and avoid situations where the agent may think it has actions available to it which are no longer valid)
     */
     rule +!clear_knowledge() {
        knowledgeStore.clear();
        //Clear down ALL form action and link action beliefs
        foreach(form_actions(string anyForm, string method_name, list any_list)) {
            -form_actions(anyForm, method_name, any_list);
        }
        foreach(link_actions(string anyLink)) {
            -link_actions(anyLink);
        }
    }

}